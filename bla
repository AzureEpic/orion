local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- Ensure character and root part are loaded
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Create necessary objects
local folder = Instance.new("Folder", Workspace)
local invisiblePart = Instance.new("Part", folder)
local attachment1 = Instance.new("Attachment", invisiblePart)

invisiblePart.Anchored = true
invisiblePart.CanCollide = false
invisiblePart.Transparency = 1

-- Global Network Settings
if not getgenv().Network then
    getgenv().Network = {
        BaseParts = {},
        Velocity = Vector3.new(15, 15, 15),
    }

    -- Retain a part for manipulation
    Network.RetainPart = function(part)
        if typeof(part) == "Instance" and part:IsA("BasePart") and part:IsDescendantOf(Workspace) then
            table.insert(Network.BaseParts, part)
            part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
            part.CanCollide = false
        end
    end

    -- Apply control to all retained parts
    RunService.Heartbeat:Connect(function()
        LocalPlayer.ReplicationFocus = Workspace
        for _, part in ipairs(Network.BaseParts) do
            if part:IsDescendantOf(Workspace) then
                part.Velocity = Network.Velocity
            end
        end
    end)
end

-- Function to apply black hole force to parts
local function applyForceToPart(part)
    if part:IsA("BasePart") and not part.Anchored and not part.Parent:FindFirstChild("Humanoid") then
        -- Clean up any existing constraints
        for _, constraint in ipairs(part:GetChildren()) do
            if constraint:IsA("BodyMover") or constraint:IsA("Attachment") or constraint:IsA("AlignPosition") then
                constraint:Destroy()
            end
        end

        -- Apply new forces
        local attachment2 = Instance.new("Attachment", part)
        local torque = Instance.new("Torque", part)
        torque.Torque = Vector3.new(100000, 100000, 100000)
        torque.Attachment0 = attachment2

        local alignPosition = Instance.new("AlignPosition", part)
        alignPosition.MaxForce = math.huge
        alignPosition.MaxVelocity = math.huge
        alignPosition.Responsiveness = 200
        alignPosition.Attachment0 = attachment2
        alignPosition.Attachment1 = attachment1
    end
end

-- Black hole toggle functionality
local blackHoleActive = true
local function toggleBlackHole()
    blackHoleActive = not blackHoleActive
    if blackHoleActive then
        for _, part in ipairs(Workspace:GetDescendants()) do
            applyForceToPart(part)
        end

        Workspace.DescendantAdded:Connect(function(part)
            if blackHoleActive then
                applyForceToPart(part)
            end
        end)

        -- Move the black hole attachment with the player
        spawn(function()
            while blackHoleActive and RunService.RenderStepped:Wait() do
                attachment1.WorldCFrame = humanoidRootPart.CFrame
            end
        end)
    end
end

-- Rainbow effect for UI
local function applyRainbowEffect(object, isText)
    local hue = 0
    RunService.RenderStepped:Connect(function()
        hue = (hue + 0.002) % 1
        local color = Color3.fromHSV(hue, 1, isText and 1 or 0.5)
        if isText then
            object.TextColor3 = color
        else
            object.BackgroundColor3 = color
        end
    end)
end

-- Create a draggable button to control the black hole
local function createControlButton()
    local screenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
    local button = Instance.new("TextButton", screenGui)

    screenGui.Name = "BlackHoleControlGUI"
    button.Name = "ToggleBlackHoleButton"
    button.Size = UDim2.new(0, 200, 0, 50)
    button.Position = UDim2.new(0.5, -100, 0.1, 0)
    button.Text = "Toggle Black Hole"
    button.TextScaled = true

    applyRainbowEffect(button, false) -- Background rainbow
    applyRainbowEffect(button, true)  -- Text rainbow

    local dragging = false
    local dragInput, mousePos, framePos

    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = button.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    button.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            button.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
    end)

    button.MouseButton1Click:Connect(function()
        toggleBlackHole()
        button.Text = blackHoleActive and "Black Hole: ON" or "Black Hole: OFF"
    end)
end

-- Initialize
createControlButton()
toggleBlackHole()
